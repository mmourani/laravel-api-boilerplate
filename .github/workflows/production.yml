name: Laravel API Production CI/CD (Multi-Tenant Hybrid)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  production-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: ‚ú® Checkout code
        uses: actions/checkout@v3

      - name: ‚åò Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, bcmath, pdo, pdo_mysql, xdebug
          coverage: xdebug

      - name: üìÅ Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: ‚ôªÔ∏è Copy production env
        run: cp .env.production .env

      - name: üèóÔ∏è Inject build + commit metadata
        run: |
          echo "APP_BUILD=$(date +%Y-%m-%d-%H%M)" >> .env
          echo "APP_COMMIT=$(git rev-parse --short HEAD)" >> .env

      - name: ü¶æ Output build metadata
        id: build
        run: echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: ‚õè Generate Laravel app key
        run: php artisan key:generate

      - name: üè© Run migrations
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: root
        run: php artisan migrate --force

      - name: üî¢ Run PHPUnit tests with coverage
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: root
        run: |
          mkdir -p build/logs
          ./vendor/bin/phpunit --coverage-clover build/logs/clover.xml --coverage-text

      - name: ‚úÖ Enforce coverage threshold
        run: |
          TOTAL=$(grep -Po 'Lines:\s*\K[0-9]+(?=%)' build/logs/clover.xml | head -n 1)
          echo "Detected coverage: $TOTAL%"
          if [ "$TOTAL" -lt 95 ]; then
            echo "‚ùå Coverage ($TOTAL%) is below 95%" && exit 1
          else
            echo "‚úÖ Coverage is $TOTAL% ‚Äî good to go!"
          fi

      - name: üìÜ Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: phpunit-production-coverage
          path: build/logs/clover.xml

  multi-tenant-deploy:
    needs: production-tests
    runs-on: ubuntu-latest

    steps:
      - name: üß∞ Set up tools
        run: sudo apt-get install jq -y

      - name: ü§ñ Deploy tenants + upload env + restart queue
        run: |
          mkdir -p build/status
          echo '{"tenants":[]}' > build/status/status.json

          echo '${{ secrets.TENANT_SITES_JSON }}' | jq -c '.[]' | while read site; do
            TENANT_NAME=$(echo "$site" | jq -r '.name')
            DOMAIN=$(echo "$site" | jq -r '.domain')
            SERVER=$(echo "$site" | jq -r '.server')
            SITEID=$(echo "$site" | jq -r '.site')
            ENV_TYPE=$(echo "$site" | jq -r '.env')
            SECRET_KEY=$(echo "$site" | jq -r '.env_secret // empty')

            echo "\nüöÄ Deploying $TENANT_NAME ($DOMAIN)..."

            if [ "$ENV_TYPE" = "production" ]; then
              echo "‚ú® Uploading production .env from secret: $SECRET_KEY"
              echo "${{ secrets[SECRET_KEY] }}" | base64 --decode > tmp.env
            else
              echo "üìÇ Uploading dev/staging .env from file: envs/.env.$TENANT_NAME"
              cp envs/.env.$TENANT_NAME tmp.env
            fi

            echo "üîÑ Syncing .env to Forge"
            curl -s -X PUT "https://forge.laravel.com/api/v1/servers/$SERVER/sites/$SITEID/env" \
              -H "Authorization: Bearer ${{ secrets.FORGE_API_TOKEN }}" \
              -H "Accept: application/json" \
              --data-urlencode @tmp.env

            echo "üöÄ Deploying via Forge API..."
            curl -s -X POST "https://forge.laravel.com/api/v1/servers/$SERVER/sites/$SITEID/deploy" \
              -H "Authorization: Bearer ${{ secrets.FORGE_API_TOKEN }}" \
              -H "Accept: application/json"

            sleep 30

            echo "üìä Verifying deployed commit via /version"
            VERSION=$(curl -s https://$DOMAIN/version || echo '{}')

            echo "$VERSION" | jq ". + {domain: \"$DOMAIN\", tenant: \"$TENANT_NAME\"}" \
              >> build/status/status.json

            echo "üõ†Ô∏è Restarting queue"
            curl -s -X POST "https://forge.laravel.com/api/v1/servers/$SERVER/sites/$SITEID/commands" \
              -H "Authorization: Bearer ${{ secrets.FORGE_API_TOKEN }}" \
              -H "Accept: application/json" \
              -d '{"command":"php artisan queue:restart"}'

          done

      - name: üìÖ Upload tenant status.json
        uses: actions/upload-artifact@v3
        with:
          name: tenant-status
          path: build/status/status.json

      - name: üöÄ Slack Success Notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: repo,message,commit,author,job,ref
          custom_payload: |
            {
              "text": ":rocket: *Multi-Tenant Production Deploy Success* ‚Äî all sites deployed from `${{ github.ref_name }}` by `${{ github.actor }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: ‚ùå Slack Failure Notification
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": ":fire: *Multi-Tenant Deploy Failed* on branch `${{ github.ref_name }}` triggered by `${{ github.actor }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
