name: Tests

on:
  push:
    branches: 
      - main
      - feature/*
      - feature/forge-setup
  pull_request:
    branches: 
      - main
      - develop

jobs:
  laravel-tests:
    name: Laravel Tests (PHP 8.2)
    runs-on: ubuntu-latest
    
    # Using SQLite for faster tests instead of MySQL
    # This matches our phpunit.xml configuration for in-memory database

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: 🔧 Setup PHP with Xdebug
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, sqlite3, pdo_sqlite, gd, zip, bcmath, exif, pcntl, xdebug
          coverage: xdebug
          tools: composer:v2
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: ⚡ Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            ${{ runner.os }}-

      - name: 📥 Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress
        
      - name: 🗂️ Create test result directories
        run: |
          mkdir -p build/logs
          mkdir -p build/coverage
          chmod -R 777 build
          echo "Test directories created:"
          ls -la build/

      - name: 🧼 Clear application cache
        run: |
          php artisan config:clear || true
          php artisan route:clear || true
          php artisan view:clear || true
          php artisan cache:clear || true

      - name: 🔧 Prepare Laravel application
        run: |
          # Create testing environment file
          cat > .env.testing << EOF
          APP_ENV=testing
          APP_KEY=base64:$(openssl rand -base64 32)
          APP_DEBUG=true
          APP_URL=http://localhost

          DB_CONNECTION=sqlite
          DB_DATABASE=:memory:

          CACHE_DRIVER=array
          SESSION_DRIVER=array
          QUEUE_CONNECTION=sync

          MAIL_MAILER=array
          EOF

      - name: 📂 Set directory permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: 🧪 Run tests with coverage
        run: |
          echo "Running tests with coverage..."
          # Set Xdebug mode explicitly and ensure code coverage is collected
          export XDEBUG_MODE=coverage
          php -v
          php -m | grep xdebug
          php artisan test --env=testing --coverage-clover build/logs/clover.xml --coverage-text --testdox
          
          # Verify coverage file was created
          echo "Checking coverage file..."
          ls -la build/logs/
          if [ -f "build/logs/clover.xml" ]; then
            echo "✅ Coverage file exists"
            head -n 20 build/logs/clover.xml
          else
            echo "❌ Coverage file missing!"
          fi
          
      - name: 🔍 Check code coverage percentage
        if: success()
        run: |
          echo "Analyzing code coverage..."
          COVERAGE=$(php -r 'libxml_use_internal_errors(true); $xml = simplexml_load_file("build/logs/clover.xml"); echo round((float) $xml->project->metrics["coveredelements"] / $xml->project->metrics["elements"] * 100, 2);')
          echo "Code coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "::warning::Code coverage (${COVERAGE}%) is below the 90% threshold"
          else
            echo "::notice::Code coverage (${COVERAGE}%) meets or exceeds the 90% threshold"
          fi

      - name: 📤 Upload coverage results to Coveralls
        if: success()
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          CI_NAME: github-actions
          CI_JOB_ID: ${{ github.run_id }}
          CI_BUILD_NUMBER: ${{ github.run_number }}
          CI_BUILD_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          CI_BRANCH: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "==================== COVERALLS DEBUG INFO ===================="
          echo "Uploading coverage results to Coveralls..."
          echo "Working directory: $(pwd)"
          echo "Repository: $GITHUB_REPOSITORY"
          echo "Branch: $CI_BRANCH"
          echo "Job ID: $CI_JOB_ID"
          echo "Build #: $CI_BUILD_NUMBER"
          
          echo "Checking coverage file:"
          ls -la build/logs/
          
          if [ -f build/logs/clover.xml ]; then
            echo "Coverage file exists and has size: $(du -h build/logs/clover.xml | cut -f1)"
            
            echo "First 30 lines of coverage report:"
            head -n 30 build/logs/clover.xml
            
            echo "Calculating coverage percentage:"
            COVERAGE=$(php -r 'libxml_use_internal_errors(true); $xml = simplexml_load_file("build/logs/clover.xml"); if($xml) { echo round((float) $xml->project->metrics["coveredelements"] / $xml->project->metrics["elements"] * 100, 2); } else { echo "Error parsing XML"; }')
            echo "Calculated coverage: ${COVERAGE}%"
            
            # Create explicit .coveralls.yml for the upload
            echo "service_name: github-actions" > .coveralls.yml
            echo "repo_token: $COVERALLS_REPO_TOKEN" >> .coveralls.yml
            echo "coverage_clover: build/logs/clover.xml" >> .coveralls.yml
            echo "json_path: build/logs/coveralls-upload.json" >> .coveralls.yml
            
            echo "Running PHP Coveralls with maximum verbosity"
            vendor/bin/php-coveralls -v --env=prod
            
            echo "Checking generated JSON file for upload:"
            if [ -f build/logs/coveralls-upload.json ]; then
              echo "JSON file exists with size: $(du -h build/logs/coveralls-upload.json | cut -f1)"
              jq -C '.git .service_name .repo_token' build/logs/coveralls-upload.json || echo "JQ not available to parse JSON"
            else
              echo "Error: JSON file for Coveralls upload was not generated"
              exit 1
            fi
          else
            echo "Error: Coverage file not found"
            exit 1
          fi
          echo "============================================================="
        
      - name: 🚨 Capture and report test failures
        if: failure()
        run: |
          echo "::error::Tests have failed. Check the logs for more details."
          echo "Last 20 lines of Laravel log:"
          if [ -f storage/logs/laravel.log ]; then
            tail -n 20 storage/logs/laravel.log
          else
            echo "No Laravel log file found."
          fi
          
      - name: 🚨 Notify on failure via Slack
        if: failure() && env.SLACK_WEBHOOK != ''
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ci-alerts
          SLACK_COLOR: '#FF0000'
          SLACK_TITLE: 'Test failed!'
          SLACK_MESSAGE: 'Tests failed on ${{ github.ref_name }} branch. See ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'

