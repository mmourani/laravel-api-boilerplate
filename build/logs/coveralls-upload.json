{"repo_token":"$COVERALLS_REPO_TOKEN","git":{"branch":"feature\/forge-setup","head":{"id":"50f6bd09ee0db592850041022cfe7f5f92e99159","author_name":"mmourani","author_email":"mouranim@gmail.com","committer_name":"mmourani","committer_email":"mouranim@gmail.com","message":"fix: streamline GitHub Actions workflow with enhanced coverage reporting and debugging"},"remotes":[{"name":"origin","url":"git@github.com:mmourani\/laravel-api-boilerplate.git"}]},"run_at":"2025-04-18 11:44:14 +0000","source_files":[{"name":"app\/Exceptions\/Handler.php","source":"<?php\n\nnamespace App\\Exceptions;\n\nuse Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\nuse Throwable;\n\nclass Handler extends ExceptionHandler\n{\n    \/**\n     * The list of the inputs that are never flashed to the session on validation exceptions.\n     *\n     * @var array<int, string>\n     *\/\n    protected $dontFlash = [\n        'current_password',\n        'password',\n        'password_confirmation',\n    ];\n\n    \/**\n     * Register the exception handling callbacks for the application.\n     *\/\n    public function register(): void\n    {\n        $this->reportable(function (Throwable $e) {\n            \/\/\n        });\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54,null,54,null,null]},{"name":"app\/Http\/Controllers\/AuthController.php","source":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Models\\User;\n\nclass AuthController extends Controller\n{\n    \/**\n     * Register a new user and return a token.\n     *\/\n    public function register(Request $request)\n    {\n        $validated = $request->validate([\n            'name' => 'required|string|max:255',\n            'email' => 'required|email|unique:users,email',\n            'password' => 'required|string|min:6|confirmed'\n        ]);\n\n        $user = User::create([\n            'name'     => $validated['name'],\n            'email'    => $validated['email'],\n            'password' => bcrypt($validated['password']),\n        ]);\n\n        $token = $user->createToken('api-token')->plainTextToken;\n\n        return response()->json([\n            'user' => [\n                'id' => $user->id,\n                'name' => $user->name,\n                'email' => $user->email,\n                'created_at' => $user->created_at,\n            ],\n            'token' => $token\n        ], 201);\n    }\n\n    \/**\n     * Login and return a token.\n     *\/\n    public function login(Request $request)\n    {\n        $request->validate([\n            'email'    => 'required|email',\n            'password' => 'required',\n        ]);\n\n        $user = User::where('email', $request->email)->first();\n\n        if (! $user || ! Hash::check($request->password, $user->password)) {\n            return response()->json(['message' => 'Invalid credentials'], 401);\n        }\n\n        $token = $user->createToken('api-token')->plainTextToken;\n\n        return response()->json([\n            'user' => [\n                'id' => $user->id,\n                'name' => $user->name,\n                'email' => $user->email,\n            ],\n            'token' => $token,\n        ], 200);\n    }\n\n    \/**\n     * Get the authenticated user.\n     *\/\n    public function user(Request $request)\n    {\n        return response()->json($request->user());\n    }\n\n    \/**\n     * Logout (revoke current token).\n     *\/\n    public function logout(Request $request)\n    {\n        $request->user()->currentAccessToken()->delete();\n\n        return response()->json(['message' => 'Logged out successfully']);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,2,2,2,2,null,1,1,1,1,1,null,1,null,1,1,1,1,1,1,1,1,1,null,null,null,null,null,null,null,2,2,2,2,null,2,null,2,1,null,null,1,null,1,1,1,1,1,1,1,1,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,1,null,1,null,null]},{"name":"app\/Http\/Controllers\/Controller.php","source":"<?php\n\nnamespace App\\Http\\Controllers;\n\nabstract class Controller\n{\n    \/\/\n}","coverage":[null,null,null,null,null,null,null,null]},{"name":"app\/Http\/Controllers\/ProjectController.php","source":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Project;\nuse Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;\n\nclass ProjectController extends Controller\n{\n    use AuthorizesRequests;\n    \/**\n     * List the authenticated user's projects.\n     *\/\n    public function index(Request $request)\n    {\n        return $request->user()->projects()->latest()->get();\n    }\n\n    \/**\n     * Store a new project.\n     *\/\n    public function store(Request $request)\n    {\n        $validated = $request->validate([\n            'title' => 'required|string|max:255',\n            'description' => 'nullable|string',\n        ]);\n\n        $project = $request->user()->projects()->create($validated);\n\n        return response()->json($project, 201);\n    }\n\n    \/**\n     * Show a specific project (only if owned by the user).\n     *\/\n    public function show(Project $project)\n    {\n        $this->authorize('view', $project);\n\n        return response()->json($project);\n    }\n\n    \/**\n     * Update an existing project (only if owned by the user).\n     *\/\n    public function update(Request $request, Project $project)\n    {\n        $this->authorize('update', $project);\n\n        $request->validate([\n            'title' => 'sometimes|required|string|max:255',\n            'description' => 'nullable|string',\n        ]);\n\n        $project->update($request->only(['title', 'description']));\n\n        return response()->json($project);\n    }\n\n    \/**\n     * Delete a project (only if owned by the user).\n     *\/\n    public function destroy(Project $project)\n    {\n        $this->authorize('delete', $project);\n\n        $project->delete();\n\n        return response()->json(['message' => 'Project deleted successfully']);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,null,null,null,2,2,2,2,null,1,null,1,null,null,null,null,null,null,null,2,null,1,null,null,null,null,null,null,null,2,null,1,1,1,1,null,1,null,1,null,null,null,null,null,null,null,2,null,1,null,1,null,null]},{"name":"app\/Http\/Controllers\/TaskController.php","source":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Task;\nuse App\\Models\\Project;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;\n\nclass TaskController extends Controller\n{\n    use AuthorizesRequests;\n\n    \/**\n     * List all tasks for a given project.\n     *\/\n    public function index(Request $request, Project $project)\n    {\n        $this->authorize('view', $project);\n\n        $query = $project->tasks();\n\n        \/\/ Filter by priority\n        if ($request->has('priority')) {\n            $query->where('priority', $request->priority);\n        }\n\n        \/\/ Filter by completion status\n        if ($request->has('done')) {\n            $query->where('done', filter_var($request->done, FILTER_VALIDATE_BOOLEAN));\n        }\n\n        \/\/ Filter by due date\n        if ($request->has('due_date')) {\n            $query->whereDate('due_date', $request->due_date);\n        }\n\n        \/\/ Sorting\n        if ($request->has('sort_by')) {\n            $direction = $request->input('direction', 'asc');\n            \n            \/\/ Ensure valid sort direction\n            $direction = in_array(strtolower($direction), ['asc', 'desc']) ? $direction : 'asc';\n            \n            \/\/ Sort by priority needs special handling for custom order\n            if ($request->sort_by === 'priority') {\n                $sql = \"CASE \n                    WHEN priority = 'high' THEN 3 \n                    WHEN priority = 'medium' THEN 2 \n                    WHEN priority = 'low' THEN 1 \n                    ELSE 0 END\";\n                \n                \/\/ For descending, high (3) should come first\n                \/\/ For ascending, low (1) should come first\n                $query->orderByRaw($sql . \" \" . ($direction === 'desc' ? 'DESC' : 'ASC'));\n            } else {\n                $query->orderBy($request->sort_by, $direction);\n            }\n        } else {\n            $query->latest(); \/\/ default: newest first\n        }\n\n        return response()->json($query->get());\n    }\n\n    \/**\n     * Store a new task in a project.\n     *\/\n    public function store(Request $request, Project $project)\n    {\n        $this->authorize('update', $project);\n\n        $validated = $request->validate([\n            'title' => 'required|string|max:255',\n            'priority' => 'required|in:low,medium,high',\n            'due_date' => 'nullable|date',\n        ]);\n\n        $task = $project->tasks()->create([\n            'title' => $validated['title'],\n            'priority' => $validated['priority'],\n            'due_date' => $validated['due_date'] ?? null,\n            'done' => false, \/\/ Default value\n        ]);\n\n        return response()->json($task, 201);\n    }\n\n    \/**\n     * Show a specific task.\n     *\/\n    public function show(Project $project, Task $task)\n    {\n        $this->authorize('view', $project);\n        \n        if ($task->project_id !== $project->id) {\n            abort(404);\n        }\n\n        return response()->json($task);\n    }\n\n    \/**\n     * Update an existing task.\n     *\/\n    public function update(Request $request, Project $project, Task $task)\n    {\n        $this->authorize('update', $project);\n        \n        if ($task->project_id !== $project->id) {\n            abort(404);\n        }\n\n        $validated = $request->validate([\n            'title' => 'sometimes|required|string|max:255',\n            'done' => 'boolean',\n            'priority' => 'sometimes|required|in:low,medium,high',\n            'due_date' => 'nullable|date',\n        ]);\n\n        $task->update($validated);\n\n        return response()->json($task);\n    }\n\n    \/**\n     * Delete a task.\n     *\/\n    public function destroy(Project $project, Task $task)\n    {\n        $this->authorize('update', $project);\n        \n        if ($task->project_id !== $project->id) {\n            abort(404);\n        }\n\n        $task->delete();\n\n        return response()->json(['message' => 'Task deleted successfully']);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,7,null,6,null,null,6,1,null,null,null,6,1,null,null,null,6,1,null,null,null,6,2,null,null,2,null,null,2,1,null,null,null,1,null,null,null,1,null,1,null,null,4,null,null,6,null,null,null,null,null,null,null,2,null,1,1,1,1,1,null,1,1,1,1,1,1,null,1,null,null,null,null,null,null,null,0,null,0,0,null,null,0,null,null,null,null,null,null,null,2,null,1,0,null,null,1,1,1,1,1,1,null,1,null,1,null,null,null,null,null,null,null,2,null,1,0,null,null,1,null,1,null,null]},{"name":"app\/Http\/Kernel.php","source":"<?php\n\nnamespace App\\Http;\n\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel\n{\n    \/**\n     * The application's global HTTP middleware stack.\n     *\n     * These middleware are run during every request to your application.\n     *\n     * @var array<int, class-string|string>\n     *\/\n    protected $middleware = [\n        \/\/ \\App\\Http\\Middleware\\TrustHosts::class,\n        \\App\\Http\\Middleware\\TrustProxies::class,\n        \\Illuminate\\Http\\Middleware\\HandleCors::class,\n        \\App\\Http\\Middleware\\PreventRequestsDuringMaintenance::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::class,\n        \\App\\Http\\Middleware\\TrimStrings::class,\n        \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class,\n    ];\n\n    \/**\n     * The application's route middleware groups.\n     *\n     * @var array<string, array<int, class-string|string>>\n     *\/\n    protected $middlewareGroups = [\n        'web' => [\n            \\App\\Http\\Middleware\\EncryptCookies::class,\n            \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n            \\Illuminate\\Session\\Middleware\\StartSession::class,\n            \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n            \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        ],\n\n        'api' => [\n            \\Laravel\\Sanctum\\Http\\Middleware\\EnsureFrontendRequestsAreStateful::class,\n            \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class.':api',\n            \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        ],\n    ];\n\n    \/**\n     * The application's middleware aliases.\n     *\n     * Aliases may be used instead of class names to conveniently assign middleware to routes and groups.\n     *\n     * @var array<string, class-string|string>\n     *\/\n    protected $middlewareAliases = [\n        'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n        'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n        'auth.session' => \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,\n        'cache.headers' => \\Illuminate\\Http\\Middleware\\SetCacheHeaders::class,\n        'can' => \\Illuminate\\Auth\\Middleware\\Authorize::class,\n        'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n        'password.confirm' => \\Illuminate\\Auth\\Middleware\\RequirePassword::class,\n        'precognitive' => \\Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests::class,\n        'signed' => \\Illuminate\\Routing\\Middleware\\ValidateSignature::class,\n        'throttle' => \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        'verified' => \\Illuminate\\Auth\\Middleware\\EnsureEmailIsVerified::class,\n    ];\n\n    \/**\n     * The priority-sorted list of middleware.\n     *\n     * Forces non-global middleware to always be in the given order.\n     *\n     * @var string[]\n     *\/\n    protected $middlewarePriority = [\n        \\Illuminate\\Foundation\\Http\\Middleware\\HandlePrecognitiveRequests::class,\n        \\Illuminate\\Cookie\\Middleware\\EncryptCookies::class,\n        \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n        \\Illuminate\\Session\\Middleware\\StartSession::class,\n        \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n        \\Illuminate\\Contracts\\Auth\\Middleware\\AuthenticatesRequests::class,\n        \\Illuminate\\Routing\\Middleware\\ThrottleRequests::class,\n        \\Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis::class,\n        \\Illuminate\\Contracts\\Session\\Middleware\\AuthenticatesSessions::class,\n        \\Illuminate\\Routing\\Middleware\\SubstituteBindings::class,\n        \\Illuminate\\Auth\\Middleware\\Authorize::class,\n    ];\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"app\/Http\/Middleware\/EncryptCookies.php","source":"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Illuminate\\Cookie\\Middleware\\EncryptCookies as Middleware;\n\nclass EncryptCookies extends Middleware\n{\n    \/**\n     * The names of the cookies that should not be encrypted.\n     *\n     * @var array<int, string>\n     *\/\n    protected $except = [\n        \/\/\n    ];\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"app\/Http\/Middleware\/HandleCors.php","source":"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Illuminate\\Http\\Middleware\\HandleCors as Middleware;\n\nclass HandleCors extends Middleware\n{\n    \/**\n     * The paths that should be excluded from CORS verification.\n     *\n     * @var array<int, string>\n     *\/\n    protected $except = [\n        \/\/\n    ];\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"app\/Http\/Middleware\/PreventRequestsDuringMaintenance.php","source":"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance as Middleware;\n\nclass PreventRequestsDuringMaintenance extends Middleware\n{\n    \/**\n     * The URIs that should be reachable while maintenance mode is enabled.\n     *\n     * @var array<int, string>\n     *\/\n    protected $except = [\n        \/\/\n    ];\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"app\/Http\/Middleware\/TrimStrings.php","source":"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Illuminate\\Foundation\\Http\\Middleware\\TrimStrings as Middleware;\n\nclass TrimStrings extends Middleware\n{\n    \/**\n     * The names of the attributes that should not be trimmed.\n     *\n     * @var array<int, string>\n     *\/\n    protected $except = [\n        'current_password',\n        'password',\n        'password_confirmation',\n    ];\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"app\/Http\/Middleware\/VerifyCsrfToken.php","source":"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as Middleware;\n\nclass VerifyCsrfToken extends Middleware\n{\n    \/**\n     * The URIs that should be excluded from CSRF verification.\n     *\n     * @var array<int, string>\n     *\/\n    protected $except = [\n        \/\/\n    ];\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},{"name":"app\/Models\/Project.php","source":"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse App\\Models\\User;\n\nclass Project extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'title',\n        'description',\n    ];\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n    public function tasks()\n    {\n        return $this->hasMany(Task::class);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,8,null,null]},{"name":"app\/Models\/Task.php","source":"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\n\nclass Task extends Model\n{\n    use HasFactory;\n\n    \/**\n     * The attributes that are mass assignable.\n     *\n     * @var array<string>\n     *\/\n    protected $fillable = [\n        'title',\n        'project_id',\n        'done',\n        'priority',\n        'due_date',\n    ];\n    \n    \/**\n     * Ensure all necessary attributes are visible in API responses.\n     * \n     * @var array<int, string>\n     *\/\n    protected $hidden = [];\n\n    \/**\n     * The attributes that should be cast.\n     *\n     * @var array<string, string>\n     *\/\n    protected $casts = [\n        'done' => 'boolean',\n        'due_date' => 'datetime',\n    ];\n\n    \/**\n     * Get the project that owns the task.\n     *\/\n    public function project()\n    {\n        return $this->belongsTo(Project::class);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null]},{"name":"app\/Models\/User.php","source":"<?php\n\nnamespace App\\Models;\n\nuse Laravel\\Sanctum\\HasApiTokens;\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Notifications\\Notifiable;\n\nclass User extends Authenticatable\n{\n    use HasApiTokens, HasFactory, Notifiable;\n\n    protected $fillable = [\n        'name',\n        'email',\n        'password',\n    ];\n\n    protected $hidden = [\n        'password',\n        'remember_token',\n    ];\n\n    protected function casts(): array\n    {\n        return [\n            'email_verified_at' => 'datetime',\n            'password' => 'hashed',\n        ];\n    }\n    public function projects()\n    {\n        return $this->hasMany(\\App\\Models\\Project::class);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,48,48,48,48,null,null,null,4,null,null]},{"name":"app\/Policies\/ProjectPolicy.php","source":"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Project;\nuse App\\Models\\User;\n\nclass ProjectPolicy\n{\n    \/**\n     * Allow viewing only if the user owns the project.\n     *\/\n    public function view(User $user, Project $project): bool\n    {\n        return $user->id === $project->user_id;\n    }\n\n    \/**\n     * Allow updating only if the user owns the project.\n     *\/\n    public function update(User $user, Project $project): bool\n    {\n        return $user->id === $project->user_id;\n    }\n\n    \/**\n     * Allow deleting only if the user owns the project.\n     *\/\n    public function delete(User $user, Project $project): bool\n    {\n        return $user->id === $project->user_id;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,12,null,null,null,null,null,null,null,11,null,null,null,null,null,null,null,5,null,null]}],"environment":{"packagist_version":"2.7.0"}}